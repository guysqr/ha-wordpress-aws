###################################################################################################
#### 
#### EFS Setup ebextension to set up a WordPress site
#### 
#### This ebextension configuration file mounts an Amazon EFS file system to the directory name 
#### taken from the EB EFS_MOUNT_DIR environment variable. EFS_REGION and EFS_FILE_SYSTEM_ID are 
#### also found in the EB environment, and are used to derive the DNS name of the EFS endpoints.
####
#### If your environment and file system are in a custom VPC, you must configure the VPC to allow
#### DNS resolution and DNS host names. See this topic in the VPC User Guide for more information:
#### 
####    http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-dns.html
####
#### This file is a modified version of one distributed by AWS which is distributed under an 
#### Apache 2.0 licence, which allows reuse with modifications such as are present here.
#### 
#### For details:
####
####     http://aws.amazon.com/apache2.0/
####
###################################################################################################

packages:
  yum:
    nfs-utils: []
    jq: []
    cachefilesd: []

commands:
  01_mount:
    command: "/tmp/mount-efs.sh"

files:
  "/tmp/mount-efs.sh":
      mode: "000755"
      content : |
        #!/bin/bash

        sudo service cachefilesd start
        echo "autostart cachefilesd"
        sudo chkconfig cachefilesd on    

        EFS_REGION=$(/opt/elasticbeanstalk/bin/get-config environment -k EFS_REGION)
        EFS_FILE_SYSTEM_ID=$(/opt/elasticbeanstalk/bin/get-config environment -k EFS_FILE_SYSTEM_ID)
        EFS_MOUNT_DIR=$(/opt/elasticbeanstalk/bin/get-config environment -k EFS_MOUNT_DIR)

        echo "Mounting EFS filesystem ${EFS_FILE_SYSTEM_ID} to directory ${EFS_MOUNT_DIR} ..."

        echo 'Stopping NFS ID Mapper...'
        service rpcidmapd status &> /dev/null
        if [ $? -ne 0 ] ; then
            echo 'rpc.idmapd is already stopped!'
        else
            service rpcidmapd stop
            if [ $? -ne 0 ] ; then
                echo 'ERROR: Failed to stop NFS ID Mapper!'
                exit 1
            fi
        fi

        echo 'Checking if EFS mount directory exists...'
        if [ ! -d ${EFS_MOUNT_DIR} ]; then
            echo "Creating directory ${EFS_MOUNT_DIR} ..."
            mkdir -p ${EFS_MOUNT_DIR}
            if [ $? -ne 0 ]; then
                echo 'ERROR: Directory creation failed!'
                exit 1
            fi
        else
            echo "Directory ${EFS_MOUNT_DIR} already exists!"
        fi

        mountpoint -q ${EFS_MOUNT_DIR}
        
        if [ $? -ne 0 ]; then
            echo "Mount command: sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,fsc,noresvport ${EFS_FILE_SYSTEM_ID}.efs.${EFS_REGION}.amazonaws.com:/ ${EFS_MOUNT_DIR}"
            sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,fsc,noresvport ${EFS_FILE_SYSTEM_ID}.efs.${EFS_REGION}.amazonaws.com:/ ${EFS_MOUNT_DIR}
            if [ $? -ne 0 ] ; then
                echo 'ERROR: Mount command failed!'
                exit 1
            fi
            echo "reloading cachefilesd"
            sudo service cachefilesd restart
            chmod 777 ${EFS_MOUNT_DIR}
            runuser -l  ec2-user -c "touch ${EFS_MOUNT_DIR}/it_works"
            if [[ $? -ne 0 ]]; then
                echo 'ERROR: Permission Error!'
                exit 1
            else
                runuser -l  ec2-user -c "rm -f ${EFS_MOUNT_DIR}/it_works"
            fi
        else
            echo "Directory ${EFS_MOUNT_DIR} is already a valid mountpoint!"
        fi

        ###################################################################################################
        # EFS has been mounted successfully if we get here...so let's use it
        #
        # First, let's check if there's already code on there, and if not, install the latest WordPress 
        # version
        #
 
        # If the install file got left behind on a previous run, delete it now
        if [ -f "${EFS_MOUNT_DIR}/latest.zip" ]; then
            echo 'Removing residual latest.zip file'
            sudo rm ${EFS_MOUNT_DIR}/latest.zip
        fi

        if [ -f "${EFS_MOUNT_DIR}/wp/index.php" ]; then
            echo 'WordPress install already created, so not reinstalling'
        else
            echo "Making destination directory and symlinking it"
            rm -r ${EFS_MOUNT_DIR}/wp
            mkdir ${EFS_MOUNT_DIR}/wp
            sudo ln -s /efs/wp ./docroot
            chmod 755 ${EFS_MOUNT_DIR}/wp
            echo "Installing WordPress for the first time"
            cd ${EFS_MOUNT_DIR}
            curl -O https://wordpress.org/latest.zip
            unzip -d ${EFS_MOUNT_DIR} latest.zip
            # echo "Check if files expanded"
            # echo "$(ls -al ${EFS_MOUNT_DIR})"
            # echo "$(ls -al ${EFS_MOUNT_DIR}/wordpress)"
            echo "Moving all the wordpress files to ${EFS_MOUNT_DIR}/wp/ and deleting the source files"
            mv -v ${EFS_MOUNT_DIR}/wordpress/{.,}* ${EFS_MOUNT_DIR}/wp/
            rm ${EFS_MOUNT_DIR}/latest.zip
            rm -R ${EFS_MOUNT_DIR}/wordpress
            echo "Listing wp:\n $(ls -al ${EFS_MOUNT_DIR}/wp)"
        fi

        ####################################################################################################
        # if you want to debug the php environment to check config, you can uncomment the else statement, 
        # and comment out the rm line. 
        #

        if [ -f "${EFS_MOUNT_DIR}/wp/info.php" ]; then
            echo '**** WARNING - info.php exists at ${EFS_MOUNT_DIR}/wp/info.php ****'
            # sudo rm ${EFS_MOUNT_DIR}/wp/info.php
        else
            echo '**** WARNING - ${EFS_MOUNT_DIR}/wp/info.php created, please update EFS ebextension to delete it ****'
            sudo echo '<?php phpinfo(); ?>' > ${EFS_MOUNT_DIR}/wp/info.php 
        fi

        ####################################################################################################
        # write the healthcheck.php file 

        sudo echo '<html><body>OK</body></html>' > ${EFS_MOUNT_DIR}/wp/healthcheck.php 

        ####################################################################################################
        # Check permissions and owners: EB runs as u:g webapp:webapp
        # WordPress needs to be able to write the wordpress directory to do updates
        # TODO: check and conform to best practice for WP permissions    
        #    

        echo "Chowning ${EFS_MOUNT_DIR}/wp to webapp:webapp"
        sudo chown -R webapp:webapp ${EFS_MOUNT_DIR}/wp
        echo "Chmodding ${EFS_MOUNT_DIR}/wp to 755"
        sudo chmod 755 ${EFS_MOUNT_DIR}/wp

        echo "Chmodding ${EFS_MOUNT_DIR}/ to 755"
        sudo chmod 755 ${EFS_MOUNT_DIR}

        echo "Chmodding all the files and folders under ${EFS_MOUNT_DIR}/wp"
        sudo find ${EFS_MOUNT_DIR}/wp -type d -exec chmod 755 {} +
        sudo find ${EFS_MOUNT_DIR}/wp -type f -exec chmod 644 {} +
        sudo chmod 640 ${EFS_MOUNT_DIR}/wp/wp-config.php

        ####################################################################################################
        # Set up cache directory
        #
        if [ ! -d "/var/www/wpcache" ]; then
            echo "Making cache folder on local disk - to be used by WP Super Cache plugin"
            sudo mkdir /var/www/wpcache
            sudo chown webapp:webapp /var/www/wpcache
        else 
            echo "Cache folder /var/www/wpcache already exists"
        fi

        ####################################################################################################
        # Reporting any cache stats
        #

        echo "Counting fscache files:"
        cd /var/cache/fscache
        echo "$(find ./ -type f | wc -l)"
        echo "Cache size on disk:"
        echo "$(du -sh)"

        echo "Listing wp-supercache files:"
        cd /var/www/wpcache
        echo "$(find ./ -type f | wc -l)"
        echo "Cache size on disk:"
        echo "$(du -sh)"

        ####################################################################################################
        # Show the file listings on ${EFS_MOUNT_DIR} and ${EFS_MOUNT_DIR}/wordpress
        #

        echo "Showing listing of ${EFS_MOUNT_DIR}:"
        echo "$(ls -al ${EFS_MOUNT_DIR})"

        echo "Showing listing of ${EFS_MOUNT_DIR}/wp:"
        echo "$(ls -al ${EFS_MOUNT_DIR}/wp)"

        ####################################################################################################
        # Anything else that needs doing
        #

        # if [ -f "${EFS_MOUNT_DIR}/wp/wp-config.php" ]; then
        #     echo "wp-config file:"
        #     echo "$(cat ${EFS_MOUNT_DIR}/wp/wp-config.php)"
        # fi

        echo 'EFS mount complete and files written'
